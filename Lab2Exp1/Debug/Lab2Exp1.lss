
Lab2Exp1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000780  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f1  00000000  00000000  00000f27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001218  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032b  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f8  00000000  00000000  00001567  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000175f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	DDRA = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  70:	87 bb       	out	0x17, r24	; 23
	DDRD = 0;
  72:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xFF;
  74:	82 bb       	out	0x12, r24	; 18
			_delay_ms(1000);
			PORTA = 0xFF;
			_delay_ms(1000);			
		}
		else{
			PORTA = 0xFF;
  76:	9f ef       	ldi	r25, 0xFF	; 255
			PORTB = 0x92;
  78:	42 e9       	ldi	r20, 0x92	; 146
			_delay_ms(1000);
			PORTB = 0x89;
  7a:	39 e8       	ldi	r19, 0x89	; 137
			_delay_ms(1000);
			PORTB = 0x86;
  7c:	26 e8       	ldi	r18, 0x86	; 134
			_delay_ms(1000);
			PORTA = 0xFF;
			_delay_ms(1000);
		}
		else if(PIND == 0b11111101){
			PORTA = 0xF0;
  7e:	50 ef       	ldi	r21, 0xF0	; 240
	PORTD = 0xFF;
	
    while (1) 
    {
		if(PIND == 0b11111110){
			PORTA = 0xFE;
  80:	6e ef       	ldi	r22, 0xFE	; 254
	DDRD = 0;
	PORTD = 0xFF;
	
    while (1) 
    {
		if(PIND == 0b11111110){
  82:	80 b3       	in	r24, 0x10	; 16
  84:	8e 3f       	cpi	r24, 0xFE	; 254
  86:	a9 f4       	brne	.+42     	; 0xb2 <main+0x46>
			PORTA = 0xFE;
  88:	6b bb       	out	0x1b, r22	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	7f e3       	ldi	r23, 0x3F	; 63
  8c:	8d e0       	ldi	r24, 0x0D	; 13
  8e:	e3 e0       	ldi	r30, 0x03	; 3
  90:	71 50       	subi	r23, 0x01	; 1
  92:	80 40       	sbci	r24, 0x00	; 0
  94:	e0 40       	sbci	r30, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x24>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x2e>
  9a:	00 00       	nop
			_delay_ms(1000);
			PORTA = 0xFF;
  9c:	9b bb       	out	0x1b, r25	; 27
  9e:	7f e3       	ldi	r23, 0x3F	; 63
  a0:	8d e0       	ldi	r24, 0x0D	; 13
  a2:	e3 e0       	ldi	r30, 0x03	; 3
  a4:	71 50       	subi	r23, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	e0 40       	sbci	r30, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x38>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x42>
  ae:	00 00       	nop
  b0:	e8 cf       	rjmp	.-48     	; 0x82 <main+0x16>
			_delay_ms(1000);
		}
		else if(PIND == 0b11111101){
  b2:	80 b3       	in	r24, 0x10	; 16
  b4:	8d 3f       	cpi	r24, 0xFD	; 253
  b6:	a9 f4       	brne	.+42     	; 0xe2 <main+0x76>
			PORTA = 0xF0;
  b8:	5b bb       	out	0x1b, r21	; 27
  ba:	7f e3       	ldi	r23, 0x3F	; 63
  bc:	8d e0       	ldi	r24, 0x0D	; 13
  be:	e3 e0       	ldi	r30, 0x03	; 3
  c0:	71 50       	subi	r23, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	e0 40       	sbci	r30, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x54>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x5e>
  ca:	00 00       	nop
			_delay_ms(1000);
			PORTA = 0xFF;
  cc:	9b bb       	out	0x1b, r25	; 27
  ce:	7f e3       	ldi	r23, 0x3F	; 63
  d0:	8d e0       	ldi	r24, 0x0D	; 13
  d2:	e3 e0       	ldi	r30, 0x03	; 3
  d4:	71 50       	subi	r23, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	e0 40       	sbci	r30, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x68>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x72>
  de:	00 00       	nop
  e0:	d0 cf       	rjmp	.-96     	; 0x82 <main+0x16>
			_delay_ms(1000);			
		}
		else{
			PORTA = 0xFF;
  e2:	9b bb       	out	0x1b, r25	; 27
			PORTB = 0x92;
  e4:	48 bb       	out	0x18, r20	; 24
  e6:	7f e3       	ldi	r23, 0x3F	; 63
  e8:	8d e0       	ldi	r24, 0x0D	; 13
  ea:	e3 e0       	ldi	r30, 0x03	; 3
  ec:	71 50       	subi	r23, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	e0 40       	sbci	r30, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x80>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x8a>
  f6:	00 00       	nop
			_delay_ms(1000);
			PORTB = 0x89;
  f8:	38 bb       	out	0x18, r19	; 24
  fa:	7f e3       	ldi	r23, 0x3F	; 63
  fc:	8d e0       	ldi	r24, 0x0D	; 13
  fe:	e3 e0       	ldi	r30, 0x03	; 3
 100:	71 50       	subi	r23, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	e0 40       	sbci	r30, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x94>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x9e>
 10a:	00 00       	nop
			_delay_ms(1000);
			PORTB = 0x86;
 10c:	28 bb       	out	0x18, r18	; 24
 10e:	7f e3       	ldi	r23, 0x3F	; 63
 110:	8d e0       	ldi	r24, 0x0D	; 13
 112:	e3 e0       	ldi	r30, 0x03	; 3
 114:	71 50       	subi	r23, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	e0 40       	sbci	r30, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0xa8>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0xb2>
 11e:	00 00       	nop
			_delay_ms(1000);
			PORTB = 0xFF;
 120:	98 bb       	out	0x18, r25	; 24
 122:	7f e3       	ldi	r23, 0x3F	; 63
 124:	8d e0       	ldi	r24, 0x0D	; 13
 126:	e3 e0       	ldi	r30, 0x03	; 3
 128:	71 50       	subi	r23, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	e0 40       	sbci	r30, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0xbc>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0xc6>
 132:	00 00       	nop
 134:	a6 cf       	rjmp	.-180    	; 0x82 <main+0x16>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
